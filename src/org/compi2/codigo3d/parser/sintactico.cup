package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER, AND,
        OR, NOT, EQ, DIF, GT, LT, GT_EQ, LT_EQ;
nonterminal NodoC3D inicial, expresion;


precedence left AND;
precedence left OR;
precedence right NOT;
precedence nonassoc EQ,DIF,GT,LT,GT_EQ,LT_EQ;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 


start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} expresion:exp 
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                    :};

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:e1 AND expresion:e2
                {:
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + e1.getCad() + " && " + e2.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp);
                :}
            |   expresion:e1 OR expresion:e2
                {:
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + e1.getCad() + " || " + e2.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp);
                :}
            |   expresion:e1 EQ expresion:e2
                {:
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + e1.getCad() + " == " + e2.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp);
                :}
            |   expresion:e1 DIF expresion:e2
                {:
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + e1.getCad() + " != " + e2.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp);
                :}
            |   expresion:e1 GT  expresion:e2
                {:
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + e1.getCad() + " > " + e2.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp);
                :}
            |   expresion:e1 LT  expresion:e2
                {:
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + e1.getCad() + " < " + e2.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp);
                :}
            |   expresion:e1 LT_EQ expresion:e2
                {:
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + e1.getCad() + " <= " + e2.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp);
                :}
            |   expresion:e1 GT_EQ expresion:e2
                {:
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + e1.getCad() + " >= " + e2.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp);
                :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   NOT expresion:e1
                    {:
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + e1.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp);
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;